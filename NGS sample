import os
import numpy as np
import matplotlib.pyplot as plt
from Bio import SeqIO
from Bio.SeqUtils import gc_fraction
import pysam
import subprocess

# Define file paths
fastq_file_path = "/data/ngs_project/experiment_2024/sample_reads.fastq"
aligned_bam_path = "/data/ngs_project/experiment_2024/aligned_reads.bam"
output_dir = "/data/ngs_project/experiment_2024/analysis_results/"

# Create output directory if it doesn't exist
os.makedirs(output_dir, exist_ok=True)

# Step 1: Read FASTQ Data
def read_fastq_data(file_path):
    """Reads FASTQ file and returns a list of sequences."""
    return [str(record.seq) for record in SeqIO.parse(file_path, "fastq")]

sequences = read_fastq_data(fastq_file_path)

# Step 2: Quality Filtering (Simulated)
def filter_quality(sequences, threshold=30):
    """Filter sequences based on a simulated quality score threshold."""
    return [seq for seq in sequences if np.random.randint(25, 40) >= threshold]

filtered_sequences = filter_quality(sequences)

# Step 3: GC Content Calculation
def calculate_gc_content(sequences):
    """Calculates GC content for each sequence."""
    return [gc_fraction(seq) * 100 for seq in sequences]

gc_contents = calculate_gc_content(filtered_sequences)

# Step 4: Plot GC Content Distribution
plt.hist(gc_contents, bins=50, color='skyblue', edgecolor='black')
plt.title('GC Content Distribution')
plt.xlabel('GC Content (%)')
plt.ylabel('Frequency')
plt.savefig(os.path.join(output_dir, 'gc_content_distribution.png'))
plt.show()

# Step 5: Alignment Quality Check (BAM)
def align_quality_check(bam_file_path):
    """Checks mapping quality in the BAM file."""
    samfile = pysam.AlignmentFile(bam_file_path, "rb")
    total_reads = samfile.count()
    mapped_reads = samfile.mapped
    return total_reads, mapped_reads

total_reads, mapped_reads = align_quality_check(aligned_bam_path)

# Step 6: Variant Calling (using bcftools)
def call_variants(bam_file_path, output_vcf_path):
    """Calls variants using bcftools."""
    command = f"bcftools mpileup -f /data/ngs_project/reference/genome.fa {bam_file_path} | bcftools call -mv -Ob -o {output_vcf_path}"
    subprocess.run(command, shell=True, check=True)

vcf_output_path = os.path.join(output_dir, 'variants_output.vcf')
call_variants(aligned_bam_path, vcf_output_path)

# Step 7: Generate and Save Report
def generate_report(sequences, gc_contents):
    """Generates a brief sequence report."""
    return {
        "Total Sequences": len(sequences),
        "Avg GC Content (%)": np.mean(gc_contents),
        "Min GC Content (%)": np.min(gc_contents),
        "Max GC Content (%)": np.max(gc_contents),
        "Avg Sequence Length": np.mean([len(seq) for seq in sequences])
    }

sequence_report = generate_report(filtered_sequences, gc_contents)

# Save the report
report_file_path = os.path.join(output_dir, 'sequence_analysis_report.txt')
with open(report_file_path, 'w') as report_file:
    for key, value in sequence_report.items():
        report_file.write(f"{key}: {value}\n")

print(f"Analysis completed. Report saved to {report_file_path}")
