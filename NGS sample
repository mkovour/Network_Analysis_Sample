# Import required libraries
import subprocess
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
from scipy.stats import zscore

# Paths (adjust paths as needed)
fastq_files = ["sample_R1.fastq.gz", "sample_R2.fastq.gz"]
reference_genome = "grch38_index"
annotation_file = "genes.gtf"

# 1. Quality Control
def quality_control(fastq_files):
    for file in fastq_files:
        subprocess.run(["fastqc", file])
    subprocess.run(["multiqc", "./"])

# 2. Read Alignment
def align_reads(fastq_files, reference_genome):
    cmd = [
        "hisat2",
        "-x", reference_genome,
        "-1", fastq_files[0],
        "-2", fastq_files[1],
        "-S", "aligned_reads.sam"
    ]
    subprocess.run(cmd)

# 3. Transcript Quantification
def quantify_expression(sam_file, annotation_file):
    cmd = [
        "stringtie", sam_file,
        "-G", annotation_file,
        "-o", "transcripts.gtf",
        "-e", "-B"
    ]
    subprocess.run(cmd)

# 4. Differential Expression Analysis (DESeq2 in R)
def differential_expression(count_file, meta_file):
    # Placeholder: DESeq2 code in R (requires Rscript execution)
    r_script = """
    library(DESeq2)
    counts <- read.csv('{count_file}', row.names=1)
    meta <- read.csv('{meta_file}', row.names=1)
    dds <- DESeqDataSetFromMatrix(countData = counts, colData = meta, design = ~ condition)
    dds <- DESeq(dds)
    res <- results(dds)
    write.csv(as.data.frame(res), "differential_expression_results.csv")
    """
    with open("deseq2_analysis.R", "w") as f:
        f.write(r_script.format(count_file=count_file, meta_file=meta_file))
    subprocess.run(["Rscript", "deseq2_analysis.R"])

# 5. Visualization of DEGs
def visualize_differential_expression(results_file):
    df = pd.read_csv(results_file)
    df["log2FC"] = zscore(df["log2FoldChange"])
    sns.scatterplot(data=df, x="log2FoldChange", y="-log10(padj)", hue="log2FC", palette="coolwarm")
    plt.title("Volcano Plot of DEGs")
    plt.show()

# Main pipeline workflow
def main():
    quality_control(fastq_files)
    align_reads(fastq_files, reference_genome)
    quantify_expression("aligned_reads.sam", annotation_file)
    differential_expression("counts.csv", "metadata.csv")
    visualize_differential_expression("differential_expression_results.csv")

if __name__ == "__main__":
    main()
