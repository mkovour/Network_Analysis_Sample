import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import spearmanr
import networkx as nx

# Load data
file_path = '/path/to/your/data/NHP_advia_per_ID_perDate.csv'
df = pd.read_csv(file_path)

# Create new columns for ratios
df['PLR'] = df['Platelet.Count'] / df['abs_lymphocytes_mk']
df['MLR'] = df['abs_monocytes_mk'] / df['abs_lymphocytes_mk']
df['NLR'] = df['abs_neutrophils_mk'] / df['abs_lymphocytes_mk']

# Handle missing data
df.dropna(subset=['PLR', 'MLR', 'NLR'], inplace=True)

# Outlier removal using IQR method
def remove_outliers(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_limit = Q1 - 1.5 * IQR
    upper_limit = Q3 + 1.5 * IQR
    return df[(df[column] >= lower_limit) & (df[column] <= upper_limit)]

# Remove outliers for PLR, MLR, and NLR
df_no_outliers_PLR = remove_outliers(df, 'PLR')
df_no_outliers_MLR = remove_outliers(df, 'MLR')
df_no_outliers_NLR = remove_outliers(df, 'NLR')

# Data visualization
def plot_data(df, x_col, y_col, hue_col, title):
    plt.figure(figsize=(8,6))
    sns.scatterplot(data=df, x=x_col, y=y_col, hue=hue_col, alpha=0.6)
    sns.regplot(data=df, x=x_col, y=y_col, scatter=False, color='black', line_kws={'lw':2})
    plt.title(title)
    plt.xlabel(x_col)
    plt.ylabel(y_col)
    plt.show()

# Plot for PLR, MLR, and NLR
plot_data(df_no_outliers_PLR, 'age_years', 'PLR', 'Sex', 'PLR vs Age (No Outliers)')
plot_data(df_no_outliers_MLR, 'age_years', 'MLR', 'Sex', 'MLR vs Age (No Outliers)')
plot_data(df_no_outliers_NLR, 'age_years', 'NLR', 'Sex', 'NLR vs Age (No Outliers)')

# Spearman's correlation
spearman_corr_PLR_MLR, _ = spearmanr(df_no_outliers_PLR['PLR'], df_no_outliers_MLR['MLR'])
spearman_corr_MLR_NLR, _ = spearmanr(df_no_outliers_MLR['MLR'], df_no_outliers_NLR['NLR'])

print(f"Spearman correlation between PLR and MLR: {spearman_corr_PLR_MLR}")
print(f"Spearman correlation between MLR and NLR: {spearman_corr_MLR_NLR}")

# Network Analysis
# Create a correlation matrix
corr_matrix = df[['PLR', 'MLR', 'NLR']].corr()

# Create a network graph from the correlation matrix
G = nx.Graph()

# Add edges based on correlation threshold
threshold = 0.7
for i in corr_matrix.columns:
    for j in corr_matrix.columns:
        if i != j and abs(corr_matrix[i][j]) > threshold:
            G.add_edge(i, j, weight=corr_matrix[i][j])

# Plot the network graph
plt.figure(figsize=(8,8))
pos = nx.spring_layout(G)
nx.draw(G, pos, with_labels=True, node_size=3000, node_color='lightblue', font_size=12, font_weight='bold', edge_color='gray')
plt.title("Network of Correlations (Threshold > 0.7)")
plt.show()
